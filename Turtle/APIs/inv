local version = "1.3.0"

function selectFullSpot()	--Iterates through the slots in the turtle until it finds a slot that isn't empty, starting at the slot currently selected
	local slot = turtle.getSelectedSlot()
	while turtle.getItemCount(slot) == 0 do
		if slot >= 16 then
			slot = 1
		else
			slot = slot + 1
		end
		turtle.select(slot)
	end
end

function getFullSlot()
	return selectFullSpot()
end

function selectItem(name, damageValue)		--Searches the turtle's inventory for the first occurrence of an item with the name 'name' and the damageValue 'damageValue'.  If 'damageValue' is nil, it is ignored.  If the item is found, it is selected, and the function returns 'true', the slot it was in, and the data for the selected item.  Of the item is not found, the function returns 'false'

	--input validation
	if string.find(name, ":") == nil then
		name = "minecraft:" .. name
	end

	for slot = 1, 16 do
		local data = turtle.getItemDetail(slot)
		if type(data) == "table" and data.name == name and (data.damage == damageValue or damageValue == nil) then
			turtle.select(slot)
			return true, slot, data
		end
	end
	return false
end

function getCountOf(name, damageValue)		--Returns the amount of the item specified in the turtle's inventory 
	
	local count = 0
	
	--input validation
	if string.find(name, ":") == nil then
		name = "minecraft:" .. name
	end
	
	for slot = 1, 16 do
		local item = turtle.getItemDetail(slot)
		if type(item) == "table" then
			if item.name == name and (damageValue == nil or item.damage == damageValue) then
				count = count + item.count
			end		
		end
	end

	return count
end

function isInventoryFull()		--Returns true when the inventory is full
	
	local emptySlot = false
	
	for slot = 1, 16 do
		if turtle.getItemDetail(slot) == nil then
			emptySlot = true
		end
	end
	
	if emptySlot then
		return false
	else
		return true
	end
end